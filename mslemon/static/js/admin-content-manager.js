// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var BaseListView, BaseModelView, Router, SideView, SiteCSS, SiteCSSList, SiteCSSListView, SiteJS, SiteJSList, SiteJSListView, SitePath, SitePathCssListView, SitePathList, SitePathListView, SitePathMainView, SiteTemplate, SiteTemplateList, SiteTemplateListView, fetch_error, fetch_success, list_views, make_alert, make_editor, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    make_alert = TrumpetApp.make_alert;
    fetch_success = function(collection, response) {
      return make_alert('Succesful Transfer', 'success');
    };
    fetch_error = function(collection, response) {
      return make_alert('Error in Transfer', 'error');
    };
    list_views = function() {
      return {
        'path': SitePathListView,
        'tmpl': SiteTemplateListView,
        'css': SiteCSSListView,
        'js': SiteJSListView
      };
    };
    make_editor = function(mtype, savebutton, content) {
      var editor, session;
      if (content == null) {
        content = '';
      }
      editor = ace.edit('editor');
      session = editor.getSession();
      session.setValue(content);
      session.on('change', function() {
        return savebutton.show();
      });
      if (mtype === 'tmpl') {
        session.setMode('ace/mode/ejs');
      } else if (mtype === 'css') {
        session.setMode('ace/mode/css');
      } else if (mtype === 'js') {
        session.setMode('ace/mode/javascript');
      }
      editor.setTheme('ace/theme/twilight');
      return editor;
    };
    Router = (function(_super) {
      __extends(Router, _super);

      function Router() {
        _ref = Router.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Router.prototype.routes = {
        '': 'home',
        'view/:listview': 'listview'
      };

      Router.prototype.common = function() {
        side_view.render();
        if (side_view.current_view !== null) {
          return side_view.current_view.remove();
        }
      };

      Router.prototype.home = function() {
        return this.common();
      };

      Router.prototype.listview = function(lview) {
        var klass, view;
        this.common();
        klass = list_views()[lview];
        view = new klass;
        view.render({
          type: lview
        });
        return side_view.current_view = view;
      };

      return Router;

    })(Backbone.Router);
    SitePath = (function(_super) {
      __extends(SitePath, _super);

      function SitePath() {
        _ref1 = SitePath.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      SitePath.prototype.defaults = {
        name: '',
        type: 'path'
      };

      return SitePath;

    })(Backbone.Model);
    SiteTemplate = (function(_super) {
      __extends(SiteTemplate, _super);

      function SiteTemplate() {
        _ref2 = SiteTemplate.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      SiteTemplate.prototype.defaults = {
        name: '',
        content: '',
        type: 'tmpl'
      };

      return SiteTemplate;

    })(Backbone.Model);
    SiteCSS = (function(_super) {
      __extends(SiteCSS, _super);

      function SiteCSS() {
        _ref3 = SiteCSS.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      SiteCSS.prototype.defaults = {
        name: '',
        content: '',
        type: 'css'
      };

      return SiteCSS;

    })(Backbone.Model);
    SiteJS = (function(_super) {
      __extends(SiteJS, _super);

      function SiteJS() {
        _ref4 = SiteJS.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      SiteJS.prototype.defaults = {
        name: '',
        content: '',
        type: 'js'
      };

      return SiteJS;

    })(Backbone.Model);
    SitePathList = (function(_super) {
      __extends(SitePathList, _super);

      function SitePathList() {
        _ref5 = SitePathList.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      SitePathList.prototype.model = SitePath;

      SitePathList.prototype.url = '/rest/sitepath';

      SitePathList.prototype.parse = function(response) {
        return response.data;
      };

      return SitePathList;

    })(Backbone.Collection);
    SiteTemplateList = (function(_super) {
      __extends(SiteTemplateList, _super);

      function SiteTemplateList() {
        _ref6 = SiteTemplateList.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      SiteTemplateList.prototype.model = SiteTemplate;

      SiteTemplateList.prototype.url = '/rest/sitetmpl';

      SiteTemplateList.prototype.parse = function(response) {
        return response.data;
      };

      return SiteTemplateList;

    })(Backbone.Collection);
    SiteCSSList = (function(_super) {
      __extends(SiteCSSList, _super);

      function SiteCSSList() {
        _ref7 = SiteCSSList.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      SiteCSSList.prototype.model = SiteCSS;

      SiteCSSList.prototype.url = '/rest/sitecss';

      SiteCSSList.prototype.parse = function(response) {
        return response.data;
      };

      return SiteCSSList;

    })(Backbone.Collection);
    SiteJSList = (function(_super) {
      __extends(SiteJSList, _super);

      function SiteJSList() {
        _ref8 = SiteJSList.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      SiteJSList.prototype.model = SiteJS;

      SiteJSList.prototype.url = '/rest/sitejs';

      SiteJSList.prototype.parse = function(response) {
        return response.data;
      };

      return SiteJSList;

    })(Backbone.Collection);
    BaseModelView = (function(_super) {
      __extends(BaseModelView, _super);

      function BaseModelView() {
        _ref9 = BaseModelView.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      BaseModelView.prototype.template = TrumpetApp.admin_mgr_tmpl.entry;

      BaseModelView.prototype.initialize = function() {
        _.bindAll(this, 'render');
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      BaseModelView.prototype.render = function() {
        var html;
        html = this.template(this.model.attributes);
        this.$el.html(html);
        return this;
      };

      BaseModelView.prototype.unrender = function() {
        console.log('unrender ' + this.model.attributes);
        return $(this.el).remove();
      };

      BaseModelView.prototype.events = {
        'click .show-entry-btn': 'editme'
      };

      BaseModelView.prototype.editme = function() {
        var button, confirm_div, content, dbutton, dbutton_html, delete_model, editor, el, html, lvheader, mtype, nbutton, tmpl,
          _this = this;
        tmpl = TrumpetApp.admin_mgr_tmpl.editor;
        html = tmpl(this.model.attributes);
        el = $('.listview-list');
        el.html(html);
        mtype = this.model.get('type');
        if (mtype === 'path') {
          el.html("SHOW ME");
          return this;
        }
        button = $('#save-content');
        content = this.model.get('content');
        editor = make_editor(mtype, button, content);
        button.hide();
        button.click(function() {
          var response;
          _this.model.set('content', editor.getValue());
          response = _this.model.save();
          response.done(function() {
            make_alert('Saved');
            return $('#save-content').hide();
          });
          return response.fail(function() {
            return make_alert('Failed to save model');
          });
        });
        nbutton = $('#new-entry-button');
        nbutton.remove();
        dbutton_html = '<div class="pull-right action-button del-entry-btn" id="del-entry-button">Delete</div>';
        lvheader = $('.listview-header');
        lvheader.append(dbutton_html);
        confirm_div = '<div id="confirm-delete"><span class="ui-icon ui-icon-alert"></span>Delete this object?</div>';
        $('.sidebar').append(confirm_div);
        dbutton = $('#del-entry-button');
        delete_model = function() {
          var response;
          response = _this.model.destroy();
          response.done(function() {
            var pt, url;
            make_alert('Deleted ' + name);
            pt = {
              trigger: true,
              replace: true
            };
            url = 'view/' + mtype;
            main_router.navigate('dummy', pt);
            return main_router.navigate(url, pt);
          });
          return response.fail(function() {
            return make_alert('Failed to delete ' + name);
          });
        };
        dbutton.click(function() {
          var name;
          $('#editor').hide();
          el = $('#confirm-delete');
          el.dialog({
            dialogClass: 'no-close',
            modal: true,
            buttons: {
              "delete": function() {
                $(this).dialog('close');
                return delete_model();
              },
              'cancel': function() {
                $(this).dialog('close');
                return $('#editor').show();
              }
            }
          });
          return name = _this.model.get('name');
        });
        return this;
      };

      return BaseModelView;

    })(Backbone.View);
    BaseListView = (function(_super) {
      __extends(BaseListView, _super);

      function BaseListView() {
        this.appendItem = __bind(this.appendItem, this);
        _ref10 = BaseListView.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      BaseListView.prototype.el = $('.right-column-content');

      BaseListView.prototype.render = function(data) {
        var tmpl;
        tmpl = TrumpetApp.admin_mgr_tmpl.listview;
        this.$el.html(tmpl(data));
        return this;
      };

      BaseListView.prototype.remove = function() {
        this.undelegateEvents();
        this.$el.empty();
        this.stopListening();
        return this;
      };

      BaseListView.prototype.appendItem = function(model) {
        var html, view;
        view = new BaseModelView({
          model: model
        });
        html = view.render(model).el;
        return $('.listview-list').append(html);
      };

      BaseListView.prototype.events = {
        'click .add-entry-btn': 'new_entry_view'
      };

      BaseListView.prototype.new_entry_view = function() {
        var button, editor, html, mclass, model, mtype, tmpl,
          _this = this;
        mclass = this.collection.model;
        model = new mclass();
        tmpl = TrumpetApp.admin_mgr_tmpl.create;
        html = tmpl(model.attributes);
        $('.listview-list').html(html);
        mtype = model.get('type');
        button = $('#create-content');
        editor = make_editor(mtype, button, '');
        button.hide();
        button.click(function() {
          var name, response;
          model.set('content', editor.getValue());
          name = $('#nameinput').val();
          model.set('name', name);
          _this.collection.add(model);
          response = model.save();
          response.done(function() {
            var msg;
            msg = 'Created ' + name;
            return make_alert(msg);
          });
          return response.fail(function() {
            var msg;
            msg = 'Failed to create ' + name;
            return make_alert(msg);
          });
        });
        return this;
      };

      return BaseListView;

    })(Backbone.View);
    SitePathListView = (function(_super) {
      __extends(SitePathListView, _super);

      function SitePathListView() {
        _ref11 = SitePathListView.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      SitePathListView.prototype.initialize = function() {
        console.log('Init SitePathListView');
        this.collection = new SitePathList;
        this.collection.bind('add', this.appendItem);
        return this.collection.fetch();
      };

      return SitePathListView;

    })(BaseListView);
    SiteTemplateListView = (function(_super) {
      __extends(SiteTemplateListView, _super);

      function SiteTemplateListView() {
        _ref12 = SiteTemplateListView.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      SiteTemplateListView.prototype.initialize = function() {
        console.log('Init SiteTemplateListView');
        this.collection = new SiteTemplateList;
        this.collection.bind('add', this.appendItem);
        return this.collection.fetch();
      };

      return SiteTemplateListView;

    })(BaseListView);
    SiteCSSListView = (function(_super) {
      __extends(SiteCSSListView, _super);

      function SiteCSSListView() {
        _ref13 = SiteCSSListView.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      SiteCSSListView.prototype.initialize = function() {
        console.log('Init SiteCSSListView');
        this.collection = new SiteCSSList;
        this.collection.bind('add', this.appendItem);
        return this.collection.fetch();
      };

      return SiteCSSListView;

    })(BaseListView);
    SiteJSListView = (function(_super) {
      __extends(SiteJSListView, _super);

      function SiteJSListView() {
        _ref14 = SiteJSListView.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      SiteJSListView.prototype.initialize = function() {
        console.log('Init SiteJSListView');
        this.collection = new SiteJSList;
        this.collection.bind('add', this.appendItem);
        return this.collection.fetch();
      };

      return SiteJSListView;

    })(BaseListView);
    SitePathMainView = (function(_super) {
      __extends(SitePathMainView, _super);

      function SitePathMainView() {
        _ref15 = SitePathMainView.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      return SitePathMainView;

    })(Backbone.View);
    SitePathCssListView = (function(_super) {
      __extends(SitePathCssListView, _super);

      function SitePathCssListView() {
        _ref16 = SitePathCssListView.__super__.constructor.apply(this, arguments);
        return _ref16;
      }

      return SitePathCssListView;

    })(Backbone.View);
    SideView = (function(_super) {
      var pull_trigger;

      __extends(SideView, _super);

      function SideView() {
        _ref17 = SideView.__super__.constructor.apply(this, arguments);
        return _ref17;
      }

      SideView.prototype.el = $('.sidebar');

      SideView.prototype.initialize = function() {
        console.log('Init SideView');
        return this.current_view = null;
      };

      SideView.prototype.template = TrumpetApp.admin_mgr_tmpl.side_view;

      SideView.prototype.render = function() {
        $(this.el).html(this.template());
        return this;
      };

      pull_trigger = {
        trigger: true,
        replace: true
      };

      SideView.prototype.events = {
        'click .home-button': function() {
          return main_router.navigate('', pull_trigger);
        },
        'click .sitepaths-button': function() {
          $('.listview-list').remove();
          main_router.navigate('dummy', pull_trigger);
          return main_router.navigate('view/path', pull_trigger);
        },
        'click .sitetmpl-button': function() {
          $('.listview-list').remove();
          main_router.navigate('dummy', pull_trigger);
          return main_router.navigate('view/tmpl', pull_trigger);
        },
        'click .sitecss-button': function() {
          $('.listview-list').remove();
          main_router.navigate('dummy', pull_trigger);
          return main_router.navigate('view/css', pull_trigger);
        },
        'click .sitejs-button': function() {
          $('.listview-list').remove();
          main_router.navigate('dummy', pull_trigger);
          return main_router.navigate('view/js', pull_trigger);
        }
      };

      return SideView;

    })(Backbone.View);
    window.main_router = new Router;
    window.side_view = new SideView;
    return Backbone.history.start();
  });

}).call(this);
