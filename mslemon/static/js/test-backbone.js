// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var SiteText, SiteTextList, SiteTextListView, SiteTextView, list_view, _ref, _ref1, _ref2, _ref3;
    SiteText = (function(_super) {
      __extends(SiteText, _super);

      function SiteText() {
        _ref = SiteText.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SiteText.prototype.defaults = {
        type: 'tutwiki',
        name: '',
        content: ''
      };

      return SiteText;

    })(Backbone.Model);
    SiteTextList = (function(_super) {
      __extends(SiteTextList, _super);

      function SiteTextList() {
        _ref1 = SiteTextList.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      SiteTextList.prototype.model = SiteText;

      SiteTextList.prototype.url = '/rest/sitetext';

      return SiteTextList;

    })(Backbone.Collection);
    SiteTextView = (function(_super) {
      __extends(SiteTextView, _super);

      function SiteTextView() {
        this.unrender = __bind(this.unrender, this);
        this.render = __bind(this.render, this);
        _ref2 = SiteTextView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      SiteTextView.prototype.tagName = 'div';

      SiteTextView.prototype.className = 'sitetext-entry';

      SiteTextView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'unrender', 'remove');
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      SiteTextView.prototype.render = function() {
        $(this.el).html("<div>Name: " + (this.model.get('name')) + "</div>\n<div>Content: " + (this.model.get('content')) + "</div>\n<span class=\"action-button delete\">delete</span>");
        return this;
      };

      SiteTextView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      SiteTextView.prototype.remove = function() {
        return this.model.destroy();
      };

      SiteTextView.prototype.events = {
        'click .delete': 'remove'
      };

      return SiteTextView;

    })(Backbone.View);
    SiteTextListView = (function(_super) {
      __extends(SiteTextListView, _super);

      function SiteTextListView() {
        _ref3 = SiteTextListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      SiteTextListView.prototype.el = $('.something');

      SiteTextListView.prototype.initialize = function() {
        this.collection = new SiteTextList;
        this.collection.bind('add', this.appendItem);
        this.counter = 0;
        return this.render();
      };

      SiteTextListView.prototype.render = function() {
        $(this.el).append('<div class="action-button fetch-site-text-button">Fetch Site Text</div>');
        $(this.el).append('<div class="action-button new-site-text-button">New Site Text</div>');
        return $(this.el).append('<div class="site-text-list"></div>');
      };

      SiteTextListView.prototype.addItem = function() {
        var item;
        this.counter++;
        item = new SiteText;
        return this.collection.add(item);
      };

      SiteTextListView.prototype.appendItem = function(sitetext) {
        var view;
        view = new SiteTextView({
          model: sitetext
        });
        return $('.site-text-list').append(view.render().el);
      };

      SiteTextListView.prototype.fetchItems = function() {
        var bbitem, item;
        $('.header').text('foobar');
        item = this.collection.get(1);
        bbitem = new SiteText(item);
        bbitem.set(item);
        this.appendItem(bbitem);
        return $('.footer').text(_.keys(bbitem.attributes));
      };

      SiteTextListView.prototype.events = {
        'click .new-site-text-button': 'addItem',
        'click .fetch-site-text-button': 'fetchItems'
      };

      return SiteTextListView;

    })(Backbone.View);
    Backbone.sync = function(method, model, success, error) {
      return $('.header').text(method);
    };
    return list_view = new SiteTextListView;
  });

}).call(this);
